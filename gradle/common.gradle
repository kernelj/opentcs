//
// This file is to be applied to every subproject.
//

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'checkstyle'
apply plugin: 'org.kordamp.gradle.stats'

apply from: "${rootDir}/gradle/versioning.gradle"

group = 'org.opentcs'

sourceCompatibility = '1.8'
archivesBaseName = name.toLowerCase()

// Attributes for the AsciiDoc documentation to include code from source files
ext.javaSrcDir = sourceSets.main.java.srcDirs[0]
ext.javaClassesDir = sourceSets.main.output.classesDir
ext.testSrcDir = sourceSets.test.java.srcDirs[0]

repositories {
  jcenter()
}

dependencies {
  compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
  compileOnly group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21', classifier: 'javadoc'

  compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'

  testCompile group: 'junit', name: 'junit', version: '4.12'
  testCompile group: 'pl.pragmatists', name: 'JUnitParams', version: '1.1.0'
  testCompile group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3'
  testCompileOnly group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3', classifier: 'sources'
  testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
  testCompileOnly group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3', classifier: 'sources'
  testCompile group: 'org.mockito', name: 'mockito-core', version: '2.8.47'
  testCompile group: 'org.mockito', name: 'mockito-core', version: '2.8.47', classifier: 'sources'
  
  testRuntime group: 'org.slf4j', name: 'slf4j-jdk14', version: '1.7.21'
}

compileJava {
  options.compilerArgs << "-Xlint:all"
  options.compilerArgs << "-Xlint:-serial"
}

compileTestJava {
  options.compilerArgs << "-Xlint:all"
  options.compilerArgs << "-Xlint:-serial"
}

checkstyle {
  toolVersion = '7.8'
  configFile = rootProject.file("config/checkstyle/checkstyle.xml")
  configProperties = [suppressions_file:rootDir.absolutePath + "/config/checkstyle/suppressions.xml"]
  ignoreFailures = true
  showViolations = false
}

task sourcesJar(type: Jar, dependsOn: classes, description: 'Creates a jar from the source files.') {
  classifier = 'sources'
  from sourceSets.main.allSource
}

test {
  ignoreFailures = true
  systemProperties.put("java.awt.headless", "true")
}

artifacts {
  archives jar
  archives sourcesJar
}

configure(install.repositories.mavenInstaller) {
  pom.project {
    groupId = project.group
    artifactId = project.name.toLowerCase()
    version = project.version
  }
}

task createFolders(description: 'Creates the source folders if they do not exist.') doLast {
  sourceSets*.allSource*.srcDirs*.each { File srcDir ->
    if (!srcDir.isDirectory()) {
      println "Creating source folder: ${srcDir}"
      srcDir.mkdirs()
    }
  }
}
