evaluationDependsOn(':openTCS-API-Base')
evaluationDependsOn(':openTCS-API-Injection')
evaluationDependsOn(':openTCS-Common')
evaluationDependsOn(':openTCS-Kernel')
evaluationDependsOn(':openTCS-PlantOverview')

apply plugin: 'distribution'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'me.champeau.gradle.japicmp'
apply from: "${rootDir}/gradle/license-headers.gradle"

def baseApiDir = file("$buildDir/api-base")
def injectionApiDir = file("$buildDir/api-injection")
def apiCmpDir = file("$buildDir/compatibility-reports")
def schemasDir = file("$buildDir/schemagen")
def samplesDir = file("$buildDir/samples")
def configDocDir = file("$buildDir/configdoc")
def userManualDir = file("$buildDir/users-guide")
def devManualDir = file("$buildDir/developers-guide")
def devManualImagesDir = file("$devManualDir/images")
def indexDir = file("$buildDir/index")
def releaseNotesDir = file("$buildDir/release-notes")
def faqDir = file("$buildDir/faq")

ext.collectableDistDir = file("$buildDir/install")

configurations {
  schemagen
  configdocgen
}

dependencies {
  compile project(':openTCS-Kernel')
  
  schemagen project(':openTCS-Kernel')
  schemagen project(':openTCS-PlantOverview')
  schemagen jar.outputs.files
  
  configdocgen project(':openTCS-Kernel')
  configdocgen project(':openTCS-PlantOverview')
  configdocgen jar.outputs.files
}

distributions {
  main {
    contents.from(baseApiDir) {
      into('developer/api-base')
    }
    contents.from(injectionApiDir) {
      into('developer/api-injection')
    }
    contents.from(apiCmpDir) {
      into('developer/compatibility-reports')
    }
    contents.from(schemasDir) {
      into('developer/xml-schemas')
    }
    contents.from(devManualDir) {
      into('developer/developers-guide')
    }
    contents.from(userManualDir) {
      into('user')
    }
    contents.from(indexDir)
    contents.from(releaseNotesDir)
    contents.from(faqDir)
  }
}

task renderDocs {
  dependsOn 'apiBase'
  dependsOn 'apiInjection'
  dependsOn 'jApiCmpAll'
  dependsOn 'schemagen'
  dependsOn 'asciidoctor'
}

installDist.dependsOn renderDocs

distTar {
  dependsOn renderDocs
  baseName = baseName.toLowerCase()
}

distZip {
  dependsOn renderDocs
  baseName = baseName.toLowerCase()
}

task release {
  dependsOn build
  dependsOn installDist
}

task apiBase(type: Javadoc, description: 'Creates Javadoc for base API.') {
  title = "openTCS ${project.version} Base API documentation"
  destinationDir = baseApiDir

  source = project(':openTCS-API-Base').sourceSets.main.allJava
  classpath = project(':openTCS-API-Base').sourceSets.main.compileClasspath
  options {
    header = "openTCS ${project.version}"
    footer = "openTCS ${project.version}"
    overview = "${project(':openTCS-API-Base').projectDir}/src/main/java/overview.html"
    group("Basic data structures", "org.opentcs.data*")
    group("Interfaces and supporting classes for accessing the kernel", "org.opentcs.access*")
    group("Kernel strategies, plant overview panels and other components", "org.opentcs.components*")
    group("Communication adapter framework", "org.opentcs.drivers*")
    group("Utility classes", "org.opentcs.util*")
  }
}

task apiInjection(type: Javadoc, description: 'Creates Javadoc for injection API.') {
  title = "openTCS ${project.version} Injection API documentation"
  destinationDir = injectionApiDir

  source = project(':openTCS-API-Injection').sourceSets.main.allJava
  classpath = project(':openTCS-API-Injection').sourceSets.main.compileClasspath
  options {
    header = "openTCS ${project.version}"
    footer = "openTCS ${project.version}"
    overview = "${project(':openTCS-API-Injection').projectDir}/src/main/java/overview.html"
    group("Classes supporting customization of openTCS applications", "org.opentcs.customizations*")
  }
}

task jApiCmpBase(type: me.champeau.gradle.ArtifactJapicmpTask) {
  dependsOn project(':openTCS-API-Base').jar
  baseline = 'org.opentcs:opentcs-api-base:4.0.0@jar'
  to = project(':openTCS-API-Base').jar.archivePath
  accessModifier = 'protected'
  onlyModified = true
  htmlOutputFile = file("$apiCmpDir/japicmp-opentcs-api-base.html")
}

task jApiCmpInjection(type: me.champeau.gradle.ArtifactJapicmpTask) {
  dependsOn project(':openTCS-API-Injection').jar
  baseline = 'org.opentcs:opentcs-api-injection:4.0.0@jar'
  to = project(':openTCS-API-Injection').jar.archivePath
  accessModifier = 'protected'
  onlyModified = true
  htmlOutputFile = file("$apiCmpDir/japicmp-opentcs-api-injection.html")
}

task jApiCmpAll {
  dependsOn jApiCmpBase
  dependsOn jApiCmpInjection
}

asciidoctor {
  dependsOn 'asciidoctorUsersGuide'
  dependsOn 'asciidoctorDevelopersGuide'
  dependsOn 'asciidoctorIndex'
  dependsOn 'asciidoctorReleaseNotes'
  dependsOn 'asciidoctorFaq'
  enabled = false
}

task asciidoctorIndex(type: org.asciidoctor.gradle.AsciidoctorTask) {
  // Document type: article (default), book, inline, manpage)
  options doctype: 'article'

  // Where to look for AsciiDoc files. Default: src/docs/asciidoc
  sourceDir = file("src/docs/index")
  
  // Where to put the rendered documents. Default: $buildDir/asciidoc.
  outputDir = indexDir
  
  // Whether to put backends' outputs into separate subdirectories  
  separateOutputDirs = false
	
  sources {
    include 'index.adoc'
  }
  
  // Set the backends the processor should use: html5 (default), docbook, manpage, pdf, deckjs
	backends = ['html5']
	
  attributes 'source-highlighter': 'coderay',
             'coderay-linenums-mode': 'table',
  // Whether to use icons for admonitions. Possible values: 'font' to use
  // FontAwesome glyphs or anything else to use graphics files.
  // Note: FontAwesome requires internet connectivity for viewing the resulting
  // HTML output...
  //  icons: '1',
  icons: 'font',
  // Where to find the icons. Default: ./images/icons.
  // iconsdir: './images/icons',
  // The type of the icons.
  // icontype: 'png',
  // Allow attributes in links (target="_blank" etc.) to be used.
  linkattrs: true,
  // Document encoding.
  encoding: 'utf-8',
  // Experimental features (rendering keyboard shortcuts, menu items, etc.)
  experimental: true
}

task asciidoctorReleaseNotes(type: org.asciidoctor.gradle.AsciidoctorTask) {
  // Document type: article (default), book, inline, manpage)
  options doctype: 'book'

  // Where to look for AsciiDoc files. Default: src/docs/asciidoc
  sourceDir = file("src/docs/release-notes")
  
  // Where to put the rendered documents. Default: $buildDir/asciidoc.
  outputDir = releaseNotesDir
  
  // Whether to put backends' outputs into separate subdirectories  
  separateOutputDirs = false
	
  sources {
    include 'release-notes.adoc'
  }
  
  // Set the backends the processor should use: html5 (default), docbook, manpage, pdf, deckjs
	backends = ['html5']
	
  attributes 'source-highlighter': 'coderay',
             'coderay-linenums-mode': 'table',
  //           'imagesdir': 'images',
  // Include a table of contents (on the left side, when rendering to HTML)
  toc: 'left',
  toclevels: '3',
  // Turn on section numbering.
  sectnums: '1',
  // Whether to use icons for admonitions. Possible values: 'font' to use
  // FontAwesome glyphs or anything else to use graphics files.
  // Note: FontAwesome requires internet connectivity for viewing the resulting
  // HTML output...
  //  icons: '1',
  icons: 'font',
  // Where to find the icons. Default: ./images/icons.
  // iconsdir: './images/icons',
  // The type of the icons.
  // icontype: 'png',
  // Allow attributes in links (target="_blank" etc.) to be used.
  linkattrs: true,
  // Document encoding.
  encoding: 'utf-8',
  // Render page numbers in the PDF
  pagenums: '1',
  // Experimental features (rendering keyboard shortcuts, menu items, etc.)
  experimental: true
}

task asciidoctorUsersGuide(type: org.asciidoctor.gradle.AsciidoctorTask) {
  dependsOn 'configdocgen'
  
  // Document type: article (default), book, inline, manpage)
  options doctype: 'book'

  // Where to look for AsciiDoc files. Default: src/docs/asciidoc
  sourceDir = file("src/docs/users-guide")
  
  // Where to put the rendered documents. Default: $buildDir/asciidoc.
  outputDir = userManualDir
  
  // Whether to put backends' outputs into separate subdirectories  
  separateOutputDirs = false
	
  sources {
    include 'opentcs-users-guide.adoc'
  }
  
  // Set the backends the processor should use: html5 (default), docbook, manpage, pdf, deckjs
	backends = ['html5', 'pdf']

  attributes 'source-highlighter': 'coderay',
             'coderay-linenums-mode': 'table',
             'imagesdir': 'images',
  // The directory where the theme file is located
             'pdf-stylesdir': 'themes',
  // The name of the YAML theme file to load. If the name ends with ".yml", it's
  // assumed to be the complete name of the file. Otherwise, "-theme.yml" is appended
  // to the name to make the file name.
             'pdf-style': 'custom',
             'configdoc': configDocDir,
  // Include a table of contents (on the left side, when rendering to HTML)
  toc: 'left',
  toclevels: '3',
  // Turn on section numbering.
  sectnums: '1',
  // Depth of section numbering
  sectnumlevels: '6',
  // Whether to use icons for admonitions. Possible values: 'font' to use
  // FontAwesome glyphs or anything else to use graphics files.
  // Note: FontAwesome requires internet connectivity for viewing the resulting
  // HTML output...
  //  icons: '1',
  icons: 'font',
  // Where to find the icons. Default: ./images/icons.
  // iconsdir: './images/icons',
  // The type of the icons.
  // icontype: 'png',
  // Allow attributes in links (target="_blank" etc.) to be used.
  linkattrs: true,
  // Document encoding.
  encoding: 'utf-8',
  // Render page numbers in the PDF
  pagenums: '1',
  // Experimental features (rendering keyboard shortcuts, menu items, etc.)
  experimental: true

  resources {
    from(sourceDir) {
      include '**/*.jpg'
      include '**/*.png'
      include '**/*.svg'
      exclude 'samples'
      exclude 'themes'
    }
  }
}

task asciidoctorDevelopersGuide(type: org.asciidoctor.gradle.AsciidoctorTask) {
  dependsOn 'samplesgen'
  
  // Document type: article (default), book, inline, manpage)
  options doctype: 'book'

  // Where to look for AsciiDoc files. Default: src/docs/asciidoc
  sourceDir = file("src/docs/developers-guide")
  
  // Where to put the rendered documents. Default: $buildDir/asciidoc.
  outputDir = devManualDir
  
  // Whether to put backends' outputs into separate subdirectories  
  separateOutputDirs = false
	
  sources {
    include 'opentcs-developers-guide.adoc'
  }
  
  // Set the backends the processor should use: html5 (default), docbook, manpage, pdf, deckjs
	backends = ['html5', 'pdf']
	
  requires 'asciidoctor-diagram'
  
  attributes 'source-highlighter': 'coderay',
             'coderay-linenums-mode': 'table',
             'base-javaSrc': project(':openTCS-API-Base').javaSrcDir,
             'base-testSrc': project(':openTCS-API-Base').testSrcDir,
             'kernel-javaSrc': project(':openTCS-Kernel').javaSrcDir,
             'kernel-guiceSrc': project(':openTCS-Kernel').guiceSrcDir,
             'kernel-testSrc': project(':openTCS-Kernel').testSrcDir,
             'plantoverview-javaSrc': project(':openTCS-PlantOverview').javaSrcDir,
             'plantoverview-guiceSrc': project(':openTCS-PlantOverview').guiceSrcDir,
             'plantoverview-testSrc': project(':openTCS-PlantOverview').testSrcDir,
             'imagesoutdir': devManualImagesDir, // Set the images directory for the output of asciidoctor-diagram
             'samples': samplesDir,
  // 'imagesdir': 'images',
  // Include a table of contents (on the left side, when rendering to HTML)
  toc: 'left',
  toclevels: '3',
  // Turn on section numbering.
  sectnums: '1',
  // Whether to use icons for admonitions. Possible values: 'font' to use
  // FontAwesome glyphs or anything else to use graphics files.
  // Note: FontAwesome requires internet connectivity for viewing the resulting
  // HTML output...
  //  icons: '1',
  icons: 'font',
  // Where to find the icons. Default: ./images/icons.
  // iconsdir: './images/icons',
  // The type of the icons.
  // icontype: 'png',
  // Allow attributes in links (target="_blank" etc.) to be used.
  linkattrs: true,
  // Document encoding.
  encoding: 'utf-8',
  // Render page numbers in the PDF
  pagenums: '1',
  // Experimental features (rendering keyboard shortcuts, menu items, etc.)
  experimental: true
  
  resources {
    from(sourceDir) {
      include '**/*.png'
      exclude 'samples'
    }
  }
  
  doLast{
    delete "$devManualDir/.asciidoctor"
  }
}

task asciidoctorFaq(type: org.asciidoctor.gradle.AsciidoctorTask) {
  // Document type: article (default), book, inline, manpage)
  options doctype: 'article'

  // Where to look for AsciiDoc files. Default: src/docs/asciidoc
  sourceDir = file("src/docs/faq")
  
  // Where to put the rendered documents. Default: $buildDir/asciidoc.
  outputDir = faqDir
  
  // Whether to put backends' outputs into separate subdirectories  
  separateOutputDirs = false
	
  sources {
    include 'faq.adoc'
  }
  
  // Set the backends the processor should use: html5 (default), docbook, manpage, pdf, deckjs
	backends = ['html5']
	
  attributes 'source-highlighter': 'coderay',
             'coderay-linenums-mode': 'table',
  //           'imagesdir': 'images',
  // Include a table of contents (on the left side, when rendering to HTML)
  toc: 'left',
  toclevels: '3',
  // Turn on section numbering.
  sectnums: '1',
  // Whether to use icons for admonitions. Possible values: 'font' to use
  // FontAwesome glyphs or anything else to use graphics files.
  // Note: FontAwesome requires internet connectivity for viewing the resulting
  // HTML output...
  //  icons: '1',
  icons: 'font',
  // Where to find the icons. Default: ./images/icons.
  // iconsdir: './images/icons',
  // The type of the icons.
  // icontype: 'png',
  // Allow attributes in links (target="_blank" etc.) to be used.
  linkattrs: true,
  // Document encoding.
  encoding: 'utf-8',
  // Render page numbers in the PDF
  pagenums: '1',
  // Experimental features (rendering keyboard shortcuts, menu items, etc.)
  experimental: true
}

task schemagen {
  dependsOn 'jar'
  dependsOn ':openTCS-Kernel:jar'
  dependsOn ':openTCS-PlantOverview:jar'

  File schemagenDir = schemasDir

  project(':openTCS-Kernel').sourceSets*.allSource*.srcDirs*.each { File srcDir ->
    inputs.dir srcDir
  }
  project(':openTCS-PlantOverview').sourceSets*.allSource*.srcDirs*.each { File srcDir ->
    inputs.dir srcDir
  }
  outputs.dir schemagenDir

  doLast {
    mkdir(schemagenDir)
    
    javaexec {
      classpath configurations.schemagen
      main = "org.opentcs.documentation.JAXBSchemaGenerator"
      args = [ "${schemagenDir}/opentcs-host-order.xsd",
             "org.opentcs.kernel.xmlhost.orders.binding.TCSOrderSet",
             "org.opentcs.kernel.xmlhost.orders.binding.Transport",
             "org.opentcs.kernel.xmlhost.orders.binding.TransportScript" ]
    }
    javaexec {
      classpath configurations.schemagen
      main = "org.opentcs.documentation.JAXBSchemaGenerator"
      args = [ "${schemagenDir}/opentcs-host-orderscript.xsd",
             "org.opentcs.kernel.xmlhost.orders.binding.TCSScriptFile",
             "org.opentcs.kernel.xmlhost.orders.binding.Transport",
             "org.opentcs.kernel.xmlhost.orders.binding.TransportScript" ]
    }
    javaexec {
      classpath configurations.schemagen
      main = "org.opentcs.documentation.JAXBSchemaGenerator"
      args = [ "${schemagenDir}/opentcs-host-response.xsd",
             "org.opentcs.kernel.xmlhost.orders.binding.TCSResponseSet",
             "org.opentcs.kernel.xmlhost.orders.binding.TransportResponse",
             "org.opentcs.kernel.xmlhost.orders.binding.ScriptResponse" ]
    }
    javaexec {
      classpath configurations.schemagen
      main = "org.opentcs.documentation.JAXBSchemaGenerator"
      args = [ "${schemagenDir}/opentcs-host-statuschannel.xsd",
             "org.opentcs.kernel.xmlhost.status.binding.TCSStatusMessageSet",
             "org.opentcs.kernel.xmlhost.status.binding.OrderStatusMessage",
             "org.opentcs.kernel.xmlhost.status.binding.VehicleStatusMessage" ]
    }
    javaexec {
      classpath configurations.schemagen
      main = "org.opentcs.documentation.JAXBSchemaGenerator"
      args = [ "${schemagenDir}/opentcs-plantoverview-persistence.xsd",
             "org.opentcs.guing.persistence.CourseModel",
             "org.opentcs.guing.persistence.CourseElement",
             "org.opentcs.guing.persistence.CourseObjectProperty",
             "org.opentcs.guing.persistence.KeyValueSetListWrapper" ]
    }
  }
}

task samplesgen {
  dependsOn 'jar'
  doLast {
    mkdir(samplesDir)
    //Args contains a tupel of (task-name, outputFile)
    javaexec {
      classpath configurations.runtime, jar.outputs.files
      main = "org.opentcs.documentation.SamplesGenerator"
      args "TELEGRAM_TO_TWO_ORDERS", "${samplesDir}/xml-telegram-to-two-orders.xml"
    }
    
    javaexec {
      classpath configurations.runtime, jar.outputs.files
      main = 'org.opentcs.documentation.SamplesGenerator'
      args "TELEGRAM_TO_STATUS", "${samplesDir}/xml-telegram-to-status.xml"
    }
    
    javaexec {
      classpath configurations.runtime, jar.outputs.files
      main = 'org.opentcs.documentation.SamplesGenerator'
      args "TELEGRAM_TO_RECEIPT_ORDERS", "${samplesDir}/xml-telegram-to-receipt-orders.xml"
    }
    
    javaexec {
      classpath configurations.runtime, jar.outputs.files
      main = 'org.opentcs.documentation.SamplesGenerator'
      args "TELEGRAM_TO_RECEIPT_BATCH", "${samplesDir}/xml-telegram-to-receipt-batch.xml"
    }
    
    javaexec {
      classpath configurations.runtime, jar.outputs.files
      main = 'org.opentcs.documentation.SamplesGenerator'
      args "TELEGRAM_TO_BATCH", "${samplesDir}/xml-telegram-to-batch.xml"
    }
    
    javaexec {
      classpath configurations.runtime, jar.outputs.files
      main = 'org.opentcs.documentation.SamplesGenerator'
      args "TELEGRAM_VEHICLE_STATUS", "${samplesDir}/xml-telegram-vehicle-status.xml"
    }
  }
}

task configdocgen {
  dependsOn 'jar'
  dependsOn ':openTCS-Kernel:jar'
  dependsOn ':openTCS-PlantOverview:jar'
  
  doLast {
    mkdir(configDocDir)
    
    javaexec {
      classpath configurations.configdocgen
      main = "org.opentcs.documentation.ConfigDocGenerator"
      args = ["${configDocDir}/KernelApplicationConfigurationEntries.adoc",
              "org.opentcs.kernel.KernelApplicationConfiguration"]
    }
    
    javaexec {
      classpath configurations.configdocgen
      main = "org.opentcs.documentation.ConfigDocGenerator"
      args = ["${configDocDir}/ControlCenterConfigurationEntries.adoc",
              "org.opentcs.kernel.controlcenter.ControlCenterConfiguration"]
    }
    
    javaexec {
      classpath configurations.configdocgen
      main = "org.opentcs.documentation.ConfigDocGenerator"
      args = ["${configDocDir}/OrderPoolConfigurationEntries.adoc",
              "org.opentcs.kernel.OrderPoolConfiguration"]
    }

    javaexec {
      classpath configurations.configdocgen
      main = "org.opentcs.documentation.ConfigDocGenerator"
      args = ["${configDocDir}/VehiclesConfigurationEntries.adoc",
              "org.opentcs.kernel.vehicles.VehiclesConfiguration"]
    }

    javaexec {
      classpath configurations.configdocgen
      main = "org.opentcs.documentation.ConfigDocGenerator"
      args = ["${configDocDir}/DefaultDispatcherConfigurationEntries.adoc",
              "org.opentcs.strategies.basic.dispatching.DefaultDispatcherConfiguration"]
    }
    
    javaexec {
      classpath configurations.configdocgen
      main = "org.opentcs.documentation.ConfigDocGenerator"
      args = ["${configDocDir}/DefaultRouterConfigurationEntries.adoc",
              "org.opentcs.strategies.basic.routing.DefaultRouterConfiguration"]
    }
    
    javaexec {
      classpath configurations.configdocgen
      main = "org.opentcs.documentation.ConfigDocGenerator"
      args = ["${configDocDir}/ShortestPathConfigurationEntries.adoc",
              "org.opentcs.strategies.basic.routing.jgrapht.ShortestPathConfiguration"]
    }
    
    javaexec {
      classpath configurations.configdocgen
      main = "org.opentcs.documentation.ConfigDocGenerator"
      args = ["${configDocDir}/RmiKernelInterfaceConfigurationEntries.adoc",
              "org.opentcs.kernel.RmiKernelInterfaceConfiguration"]
    }

    javaexec {
      classpath configurations.configdocgen
      main = "org.opentcs.documentation.ConfigDocGenerator"
      args = ["${configDocDir}/XMLHostInterfaceConfigurationEntries.adoc",
              "org.opentcs.kernel.xmlhost.XMLHostInterfaceConfiguration"]
    }
    
    javaexec {
      classpath configurations.configdocgen
      main = "org.opentcs.documentation.ConfigDocGenerator"
      args = ["${configDocDir}/VirtualVehicleConfigurationEntries.adoc",
              "org.opentcs.virtualvehicle.VirtualVehicleConfiguration"]
    }
    
    javaexec {
      classpath configurations.configdocgen
      main = "org.opentcs.documentation.ConfigDocGenerator"
      args = ["${configDocDir}/PlantOverviewApplicationConfigurationEntries.adoc",
              "org.opentcs.guing.util.PlantOverviewApplicationConfiguration"]
    }
    
    //    javaexec {
    //      classpath configurations.configdocgen
    //      main = "org.opentcs.documentation.ConfigDocGenerator"
    //      args = ["${configDocDir}/DefaultRecoveryEvaluator.adoc",
    //             "org.opentcs.strategies.basic.recovery.DefaultRecoveryEvaluatorConfiguration"]
    //    }
  }
}
