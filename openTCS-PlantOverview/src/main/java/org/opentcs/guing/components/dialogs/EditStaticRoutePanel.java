/*
 * openTCS copyright information:
 * Copyright (c) 2005-2011 ifak e.V.
 * Copyright (c) 2012 Fraunhofer IML
 *
 * This program is free software and subject to the MIT license. (For details,
 * see the licensing information (LICENSE.txt) you should have received with
 * this copy of the software.)
 */

package org.opentcs.guing.components.dialogs;

import com.google.inject.assistedinject.Assisted;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import static java.util.Objects.requireNonNull;
import javax.inject.Inject;
import javax.swing.DefaultListModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.opentcs.guing.application.GuiManager;
import org.opentcs.guing.model.ModelComponent;
import org.opentcs.guing.model.elements.PointModel;
import org.opentcs.guing.model.elements.StaticRouteModel;
import org.opentcs.guing.util.ResourceBundleUtil;

/**
 * Benutzeroberfläche zum Bearbeiten einer statischen Route.
 *
 * @author Sebastian Naumann (ifak e.V. Magdeburg)
 * @author Stefan Walter (Fraunhofer IML)
 */
public class EditStaticRoutePanel
    extends DialogContent {

  /**
   * A factory for dialog-related components.
   */
  private final DialogsFactory dialogsFactory;
  /**
   * Die zu bearbeitende statische Route.
   */
  private final StaticRouteModel fStaticRoute;
  /**
   * Die Knoten der statischen Route.
   */
  private final LinkedList<PointModel> fPoints = new LinkedList<>();
  /**
   * Alle Knoten des Fahrkurses.
   */
  private final List<PointModel> fAllPoints;

  /**
   * Creates new instance.
   *
   * @param guiManager The GUI manager.
   * @param dialogsFactory A factory for dialogs-related components.
   * @param staticRoute die zu bearbeitende statische Route
   * @param allPoints alle Knoten des Fahrkurses
   */
  @Inject
  public EditStaticRoutePanel(final GuiManager guiManager,
                              DialogsFactory dialogsFactory,
                              @Assisted StaticRouteModel staticRoute,
                              @Assisted List<PointModel> allPoints) {
    requireNonNull(guiManager, "guiManager");
    this.dialogsFactory = requireNonNull(dialogsFactory, "dialogsFactory");
    this.fStaticRoute = requireNonNull(staticRoute, "staticRoute");
    this.fAllPoints = requireNonNull(allPoints, "allPoints");
    
    initComponents();
    buttonRemove.setEnabled(false);

    for (ModelComponent routeChildComp : fStaticRoute.getChildComponents()) {
      fPoints.add((PointModel) routeChildComp);
    }
    // Nur die Liste aller Punkte sortieren
    Collections.sort(fAllPoints);
    
    setDialogTitle(ResourceBundleUtil.getBundle().getString("staticRoute.edit.text") + " " + staticRoute.getName());

    listPoints.addListSelectionListener(new ListSelectionListener() {

      @Override
      public void valueChanged(ListSelectionEvent evt) {
        if (evt.getValueIsAdjusting()) {
          return;
        }

        int selectedIndex = listPoints.getSelectedIndex();

        if (selectedIndex >= 0) {
          buttonRemove.setEnabled(true);
          String entry = listPoints.getModel().getElementAt(selectedIndex);
          Iterator<PointModel> e = fAllPoints.iterator();

          while (e.hasNext()) {
            PointModel point = e.next();

            if (point.getName().equals(entry)) {
              guiManager.figureSelected(point);
            }
          }
        }
        else {
          buttonRemove.setEnabled(false);
        }
      }
    });
  }

  @Override // DialogContent
  public void update() {
    fStaticRoute.removeAllPoints();

    Iterator<PointModel> ePoints = fPoints.iterator();

    while (ePoints.hasNext()) {
      PointModel point = ePoints.next();
      fStaticRoute.addPoint(point);
    }

    fStaticRoute.pointsChanged();
  }

  @Override // DialogContent
  public void initFields() {
    DefaultListModel<String> listModel = new DefaultListModel<>();

    for (PointModel node : fPoints) {
      listModel.addElement(node.getName());
    }

    listPoints.setModel(listModel);
  }

  // CHECKSTYLE:OFF
  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    scrollPanePoints = new javax.swing.JScrollPane();
    listPoints = new javax.swing.JList<>();
    controlPanel = new javax.swing.JPanel();
    buttonEdit = new javax.swing.JButton();
    buttonRemove = new javax.swing.JButton();

    setName("EditStaticRoutePanel"); // NOI18N
    setLayout(new java.awt.GridBagLayout());

    scrollPanePoints.setPreferredSize(new java.awt.Dimension(180, 200));

    listPoints.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    scrollPanePoints.setViewportView(listPoints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 0.5;
    gridBagConstraints.weighty = 0.5;
    add(scrollPanePoints, gridBagConstraints);

    controlPanel.setName("controlPanel"); // NOI18N
    controlPanel.setLayout(new java.awt.GridBagLayout());

    java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/opentcs/guing/res/labels"); // NOI18N
    buttonEdit.setText(bundle.getString("staticRoute.buttonEdit.text")); // NOI18N
    buttonEdit.setToolTipText(bundle.getString("staticRoute.buttonEdit.toolTipText")); // NOI18N
    buttonEdit.setName("buttonEdit"); // NOI18N
    buttonEdit.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        buttonEditActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    controlPanel.add(buttonEdit, gridBagConstraints);

    buttonRemove.setText(bundle.getString("staticRoute.buttonRemove.text")); // NOI18N
    buttonRemove.setToolTipText(bundle.getString("staticRoute.buttonRemove.toolTipText")); // NOI18N
    buttonRemove.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        buttonRemoveActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 4);
    controlPanel.add(buttonRemove, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
    add(controlPanel, gridBagConstraints);
  }// </editor-fold>//GEN-END:initComponents
  // CHECKSTYLE:ON

  /**
   * Fügt Knoten ab dem letzten Knoten hinzu.
   *
   * @param evt das auslösende Ereignis
   */
    private void buttonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditActionPerformed
      PointModel point = null;

      if (!fPoints.isEmpty()) {
        point = fPoints.getLast();
      }

      AddNodesToStaticRoutePanel p
          = dialogsFactory.createAddNodesToStaticRoutePanel(point, fAllPoints);
      StandardContentDialog d = new StandardContentDialog(controlPanel, p);
      d.setVisible(true);

      if (d.getReturnStatus() == StandardContentDialog.RET_OK) {
        fPoints.addAll(p.getAddedPoints());
        initFields();
      }
    }//GEN-LAST:event_buttonEditActionPerformed

  /**
   * Entfernt den markierten und alle nachfolgenden Knoten.
   *
   * @evt das auslösende Ereignis
   */
    private void buttonRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoveActionPerformed
      int i = listPoints.getSelectedIndex();

      if (i == -1) {
        return;
      }

      DefaultListModel<String> listModel = (DefaultListModel<String>) listPoints.getModel();

      while (fPoints.size() > i) {
        fPoints.remove(i);
        listModel.removeElementAt(i);
      }
    }//GEN-LAST:event_buttonRemoveActionPerformed

  // CHECKSTYLE:OFF
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton buttonEdit;
  private javax.swing.JButton buttonRemove;
  private javax.swing.JPanel controlPanel;
  private javax.swing.JList<String> listPoints;
  private javax.swing.JScrollPane scrollPanePoints;
  // End of variables declaration//GEN-END:variables
  // CHECKSTYLE:ON
}
